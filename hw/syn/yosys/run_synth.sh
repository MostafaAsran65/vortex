#!/usr/bin/env bash
# run_synth.sh â€” minimal Yosys wrapper: generates synth.ys and runs it
#
# Usage (env):
#   TOP=<top> SRC_FILE=<filelist.f> \
#   [LIB_TGT=<tech.lib>] [LIB_ROOT=<dir_with_libs>] \
#   [SDC_FILE=<constraints.sdc>] \
#   [OUT_DIR=out] [RPT_DIR=reports] \
#   [RUN_SYNTH=1] [RUN_MAP=1] [RUN_STA=0] \
#   [ABC_PERIOD=<ns>] [BB_MODULES="modA,modB"] \
#   ./run_synth.sh
#
set -euo pipefail

die() { echo "FATAL: $*" >&2; exit 1; }
log() { echo "[run_synth] $*"; }

now_ms() { date +%s%3N; }
hhmmss() { local ms=$1; local s=$((ms/1000)); printf "%02d:%02d:%02d" $((s/3600)) $(((s/60)%60)) $((s%60)); }
stamp() { local label="$1"; local now=$(now_ms); printf "TIME %-16s  stage=%s  total=%s\n" "$label" "$(hhmmss $((now-LAP_START)))" "$(hhmmss $((now-START_MS)))"; LAP_START=$now; }

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# -------- config --------
TOP="${TOP:-}"; [[ -n "${TOP}" ]] || die "TOP required"
SRC_FILE="${SRC_FILE:-}"; [[ -n "${SRC_FILE}" ]] || die "SRC_FILE required"

LIB_ROOT="${LIB_ROOT:-}"
LIB_TGT="${LIB_TGT:-}"
SDC_FILE="${SDC_FILE:-}"
OUT_DIR="${OUT_DIR:-out}"
RPT_DIR="${RPT_DIR:-reports}"
RUN_SYNTH="${RUN_SYNTH:-1}"
RUN_MAP="${RUN_MAP:-1}"
RUN_STA="${RUN_STA:-0}"
ABC_PERIOD="${ABC_PERIOD:-}"
BB_MODULES="${BB_MODULES:-}"

mkdir -p "$OUT_DIR" "$RPT_DIR"

YS="$OUT_DIR/synth.ys"
YLOG="$RPT_DIR/yosys.log"
NET_PRE="$OUT_DIR/${TOP}_syn.v"
NET_POST="$OUT_DIR/${TOP}_mapped.v"
JOUT="$OUT_DIR/${TOP}.json"

START_MS=$(now_ms); LAP_START=$START_MS

# -------- parse VCS-style filelist --------
declare -a SRC_FILES=()
declare -a INC_DIRS=()
declare -a DEFINES=()

expand_filelist() {
  local f="$1"
  [[ -f "$f" ]] || die "filelist not found: $f"
  local next_is_file=0
  while IFS= read -r raw || [[ -n "$raw" ]]; do
    local line="${raw#"${raw%%[![:space:]]*}"}"; line="${line%"${line##*[![:space:]]}"}"
    [[ -z "$line" || "$line" =~ ^# ]] && continue
    for tok in $line; do
      if [[ "$tok" == "-f" ]]; then next_is_file=1; continue; fi
      if [[ $next_is_file -eq 1 ]]; then expand_filelist "$tok"; next_is_file=0; continue; fi
      if [[ "$tok" == +incdir+* ]]; then INC_DIRS+=("${tok#+incdir+}"); continue; fi
      if [[ "$tok" == +define+* ]]; then d="${tok#+define+}"; [[ "$d" == *=* ]] && DEFINES+=("$d") || DEFINES+=("$d=1"); continue; fi
      [[ "$tok" == +* ]] && continue
      SRC_FILES+=("$tok")
    done
  done < "$f"
}
expand_filelist "$SRC_FILE"

# -------- liberty discovery --------
mapfile -t LIB_LIST < <( ( [[ -n "$LIB_ROOT" ]] && find "$LIB_ROOT" -type f -name '*.lib' -print ) | sort -u )
[[ -n "$LIB_TGT" ]] && [[ -f "$LIB_TGT" ]] || true

# -------- ABC period from SDC (optional) --------
if [[ -z "$ABC_PERIOD" && -n "$SDC_FILE" && -f "$SDC_FILE" ]]; then
  ABC_PERIOD="$(awk '
    tolower($0) ~ /create_clock/ {
      for (i=1;i<=NF;i++) if (tolower($i) ~ /^-period$/ && (i+1)<=NF) { print $(i+1); exit }
    }' "$SDC_FILE" || true)"
fi

log "TOP=$TOP  RUN_SYNTH=$RUN_SYNTH RUN_MAP=$RUN_MAP RUN_STA=$RUN_STA"
log "Sources=${#SRC_FILES[@]}  Incdirs=${#INC_DIRS[@]}  Defines=${#DEFINES[@]}"
[[ -n "$ABC_PERIOD" ]] && log "ABC_PERIOD=$ABC_PERIOD ns" || log "ABC_PERIOD not set"

# -------- synth.ys --------
log "Writing $YS"
{
  echo "# Auto-generated by run_synth.sh"
  echo "verilog_defaults -add -sv"
  for d in "${INC_DIRS[@]}"; do printf "verilog_defaults -add -I %q\n" "$d"; done
  for d in "${DEFINES[@]}"; do printf "verilog_defaults -add -D %q\n" "$d"; done

  for l in "${LIB_LIST[@]}"; do printf "read_liberty -lib %q\n" "$l"; done
  [[ -n "$LIB_TGT" ]] && printf "read_liberty -lib %q\n" "$LIB_TGT"

  echo "# read sources"
  for s in "${SRC_FILES[@]}"; do printf "read_verilog -defer %q\n" "$s"; done

  if [[ -n "$BB_MODULES" ]]; then
    IFS=',' read -r -a bbmods <<< "$BB_MODULES"
    for m in "${bbmods[@]}"; do printf "blackbox %q\n" "$m"; done
  fi

  printf "hierarchy -check -top %q\n" "$TOP"
  if [[ "$RUN_SYNTH" == "1" ]]; then
    echo "proc; opt"
    echo "fsm; opt"
    echo "memory; opt"
    echo "memory_map; opt"
    echo "alumacc; wreduce; share; opt"
    echo "techmap; opt"
  else
    echo "# RUN_SYNTH=0"
  fi

  printf "write_verilog -noattr -noexpr -renameprefix syn_ %q\n" "$NET_PRE"
  printf "write_json %q\n" "$JOUT"

  if [[ "$RUN_MAP" == "1" ]]; then
    if [[ -n "$LIB_TGT" ]]; then
      printf "dfflibmap -liberty %q\n" "$LIB_TGT"
      if [[ -n "$ABC_PERIOD" ]]; then
        printf "abc -markgroups -D %q -liberty %q\n" "$ABC_PERIOD" "$LIB_TGT"
      else
        printf "abc -markgroups -liberty %q\n" "$LIB_TGT"
      fi
      printf "stat -liberty %q\n" "$LIB_TGT"
    else
      echo "synth"
      echo "stat"
    fi
    printf "write_verilog -noattr -noexpr %q\n" "$NET_POST"
  fi
} > "$YS"
stamp "gen-ys"

# -------- run yosys --------
log "yosys -l $YLOG -s $YS"
yosys -l "$YLOG" -s "$YS"
stamp "yosys"

# -------- optional OpenSTA (run_sta.tcl colocated) --------
if [[ "$RUN_STA" == "1" ]]; then
  STA_SCRIPT="$SCRIPT_DIR/run_sta.tcl"
  NETLIST="$NET_POST"; [[ -f "$NETLIST" ]] || NETLIST="$NET_PRE"
  log "TOP=$TOP NETLIST=$NETLIST LIB_TGT=$LIB_TGT LIB_ROOT=$LIB_ROOT SDC_FILE=$SDC_FILE RPT_DIR=$RPT_DIR sta $STA_SCRIPT"
  TOP=$TOP NETLIST="$NETLIST" LIB_TGT="$LIB_TGT" LIB_ROOT="$LIB_ROOT" SDC_FILE="$SDC_FILE" RPT_DIR="$RPT_DIR" sta "$STA_SCRIPT" > "$RPT_DIR/sta.log" 2>&1
  cat "$RPT_DIR/sta.log"
  stamp "sta"
fi

echo
echo "DONE. Top: $TOP  |  RUN_SYNTH=$RUN_SYNTH  RUN_MAP=$RUN_MAP  RUN_STA=$RUN_STA"
TOTAL=$(( $(now_ms) - START_MS ))
echo "TOTAL ELAPSED: $(hhmmss $TOTAL)"
